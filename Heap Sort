Heap Sort

Algorithm :- 

1. Build Up max Heap from the given array.
2. Swap(first element,size--(element))
3. Call heapify again
4. Repeat Step 2 and 3 until size>0

// Heap Sort Code In CPP

#include <bits/stdc++.h>
using namespace std;

void heapify(vector<int>& arr,int i,int n){
    int l=i;
    int left=i*2+1;
    int right=i*2+2;
    
    if(left<n && right<n && arr[l]<arr[left] && arr[left]>arr[right]){
        l=left;
    }
    else if(left<n && right<n && arr[l]<arr[right] && arr[right]>arr[l]){
        l=right;
    }
    else if(left<n && arr[left]>arr[l]){
        l=left;
    }
    else if(right<n && arr[right]>arr[l]){
        l=right;
    }
    
    if(l!=i){
        swap(arr[l],arr[i]);
        heapify(arr,l,n);
    }
    
}

void heapSort(vector<int> &arr){
    for(int i=(arr.size()+1)/2;i>=0;i--){
        heapify(arr,i,arr.size());
    }
    for(auto a:arr)cout<<a<<" ";
    cout<<"\n";
    for(int i=arr.size()-1;i>0;i--){
        swap(arr[0],arr[i]);
        heapify(arr,0,i);
    }
    for(auto a:arr)cout<<a<<" ";
}
int main()
{
    vector<int> arr={ 12, 11, 13, 5, 6, 7 };
    heapSort(arr);
    return 0;
}
